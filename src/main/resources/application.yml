## persistence section
spring:
  datasource:
    url: jdbc:h2:mem:masterdata;MODE=POSTGRESQL;DATABASE_TO_LOWER=TRUE;CASE_INSENSITIVE_IDENTIFIERS=TRUE;NON_KEYWORDS=VALUE
    #url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres

    hikari:
      maximum-pool-size: 10
      connection-timeout: 10000 #timeout in ms

  batch:
    job:
      enabled: false

    jdbc:
      initialize-schema: never
      table-prefix: masterdata.BATCH_ #prefix that saves the batch tables to the same schema as the masterdata, we could also use a totally seperated schema like "BATCH"

    scheduler:
      enabled: false
      rate: 5000

spring.flyway.default-schema: masterdata #flyway will create the schema if it does not exist yet, hence we need to do still create it with "if exists" for H2

#mongo
spring.autoconfigure.exclude: ${mongodb.autoconfiguration}
spring.data.mongodb.uri: "mongodb://mongodb:mongodb@localhost:27017/masterdata?authSource=admin"

mongodb.autoconfiguration: "org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration"
jdbc.autoconfiguration: "org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration"

#log levels
logging.level.root: "WARN"
logging.level.org.goafabric: "INFO"

logging.level.org.springframework: "INFO"
logging.level.org.flywaydb.core: "INFO"
logging.level.org.hibernate.SQL: "INFO"

#logging.pattern.console: "%white(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable"
